package ragkit

import (
	"context"
	"fmt"
)

// Vectorizer is a combination of Indexer and Retriever
type Vectorizer interface {
	Indexer
	Retriever

	fmt.Stringer
}

// Embedder is a type that can embed texts into vectors
type Embedder interface {
	// EmbedText: Convert a single text to an embedding vector
	EmbedText(ctx context.Context, text string) ([]float32, error)

	// EmbedTexts: Convert texts to embedding vectors
	EmbedTexts(ctx context.Context, texts ...string) ([][]float32, error)

	fmt.Stringer
	// // Dimension: Get the dimension of embedding vectors
	// Dimension() int
}

// Indexer is a type that can index documents into a vector database
type Indexer interface {
	// Index: Index multiple documents
	// Returns: IDs of indexed documents
	Index(ctx context.Context, docs ...Document) ([]string, error)

	// Delete: Delete a document by ID
	Delete(ctx context.Context, id string) error

	// Exists: Check if a document with the given ID exists
	Exists(ctx context.Context, id string) (bool, error)
}

// Document is a type that represents a document
type Document struct {
	ID       string         // Unique ID
	Text     string         // Original text
	Metadata map[string]any // Optional: Additional metadata
	Vector   []float32      // Optional: Embedding vector (generated by Embeder if not provided)
}

// Retriever is a type that can retrieve documents from a vector database
type Retriever interface {
	// Retrieve: Return top-K documents based on query vector
	Retrieve(ctx context.Context, query []float32, topK int, metadataFieldNames ...string) ([]RetrievedDoc, error)

	// RetrieveText: Return top-K documents based on text query
	RetrieveText(ctx context.Context, text string, topK int, metadataFieldNames ...string) ([]RetrievedDoc, error)
}

// RetrievedDoc is a type that represents a retrieved document from vector database
type RetrievedDoc struct {
	// ID       string         // Document ID
	// Score    float32        // Similarity score
	Vector   []float32      // Retrieved vector
	Text     string         // Retrieved text
	Metadata map[string]any // Optional metadata
}
