package ragkit

import "context"

// Document is a type that represents a document
type Document struct {
	ID       string         // Unique ID
	Text     string         // Original text
	Vector   []float32      // Optional: Embedding vector (generated by Embeder if not provided)
	Metadata map[string]any // Optional: Additional metadata
}

// Indexer is a type that can index documents into a vector database
type Indexer interface {
	// Index: Index multiple documents
	Index(ctx context.Context, docs []Document) error

	// Delete: Delete a document by ID
	Delete(ctx context.Context, id string) error

	// Exists: Check if a document with the given ID exists
	Exists(ctx context.Context, id string) (bool, error)
}

// RetrievedDoc is a type that represents a retrieved document from vector database
type RetrievedDoc struct {
	ID       string         // Document ID
	Vector   []float32      // Retrieved vector
	Score    float32        // Similarity score
	Metadata map[string]any // Optional metadata
}

// Retriever is a type that can retrieve documents from a vector database
type Retriever interface {
	// Retrieve: Return top-K documents based on query vector
	Retrieve(ctx context.Context, query []float32, topK int) ([]RetrievedDoc, error)

	// RetrieveText: Return top-K documents based on text query
	RetrieveText(ctx context.Context, text string, topK int) ([]RetrievedDoc, error)
}

// IndexerRetriever is a combination of Indexer and Retriever
type IndexerRetriever interface {
	Indexer
	Retriever
}

type Embeder interface {
	// Embed: Convert texts to embedding vectors
	Embed(ctx context.Context, texts ...string) ([][]float32, error)

	// Dimension: Get the dimension of embedding vectors
	Dimension() int
}
